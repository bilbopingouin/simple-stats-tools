####################################
# Packages
####################################

# standard libs
import math
import os
import sys

# local directory to path
path = os.path.dirname(__file__)
if not path:
    path = '.'
sys.path.append(path+'/../python-libs/')

# local libs
import function_generator  # noqa: E402

####################################
# Tests
####################################


def test_functions_generations():

    # Using:
    # https://stackoverflow.com/questions/32111941/
    #   r-how-to-generate-a-noisy-sine-function#32112610
    yvalues = [
        0.82982774,  2.24736614,  2.65015416,
        3.46682674,  3.52729297,  3.49584034,
        3.21650125,  4.36715717,  3.33775743,
        4.25865056,  3.08154581,  1.29021692,
        1.29727107,  0.18405785,  0.54038839,
        -1.56588876, -1.12647564, -2.22541481,
        -1.73397892, -1.47479364, -2.78684092,
        -0.71941248, -1.18848838, -1.14310578,
        0.99296343,  1.96275316,  2.21877083,
        1.82625195,  3.56494503,  4.58475139,
        3.43430470,  4.96176449,  4.05305860,
        3.47720003,  3.12880561,  1.63220985,
        2.47756490,  0.32653887,  0.04058271,
        -0.27735692, -1.00248342, -2.03402250,
        -1.99755668, -1.76619781, -2.03965488,
        -2.48876795, -1.17858836, -0.83329113,
        0.41488879,  0.50468218,  1.12150799,
        1.68485862,  2.28072161,  3.96888097,
        2.91623328,  3.34443738,  3.09313796,
        3.28688135,  3.72462122,  2.96415418,
        1.85136958,  2.62886448,  1.13530004,
        0.27470068, -0.12288578, -1.15473463,
        -2.15411720, -1.00004169, -2.54632330,
        -1.92948988, -1.29557262, -1.53368721,
        -1.04163048, -0.20596297,  1.77020757,
        2.41725266,  1.92812607,  2.81425263,
        3.74461982,  3.47113171,  3.01444636,
        4.55037931,  2.80800815,  4.33598397,
        3.66507070,  2.72017885,  2.17351610,
        0.75793812,  0.25465984, -1.62278327,
        -1.04956540, -0.86896317, -1.34327100,
        -2.07355078, -1.00718962, -1.08180038,
        -1.25338040, -1.03877604,  1.12414670,
        0.24223937
    ]

    functions = [
        ['polynomial',  '1:0.1:5'],
        ['polynomial',  '2:0.002:-0.3:1'],
        ['sine',        '5:0.1:0.5'],
        ['exponential', '10:0.2'],
        ['gauss',       '10:10:50'],
        ['poisson',     '10:4'],
        ['log',         '5:2'],
        ['sqrt',        '0.5:5'],
        ['inverse',     '10:5'],
        ['identity',    '0'],
        ['window',      '5'],
        ['cumulative',  '0'],
        ['factored',    '5'],
        ['quadratic',   '0.1']
    ]

    for n, func in enumerate(functions):
        print('#Processing:', func[0], func[1])
        F = function_generator.function_generator(func[0], func[1])

        for m in range(100):
            y = F.get_function_value(m, yvalues[m])
            if not math.isnan(y):
                print(m+n*100, y)
